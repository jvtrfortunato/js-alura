// 1 - Crie um array de objetos JavaScript representando informa√ß√µes de livros. Cada objeto deve conter pelo menos as seguintes propriedades:
// id (number): identificador do livro.
// titulo (string): t√≠tulo do livro.
// autor (string): nome do autor.
// anoPublicacao (number): ano de publica√ß√£o do livro.
const biblioteca = [
    { id: 1, titulo: "O Senhor dos An√©is", autor: "J.R.R. Tolkien", anoPublicacao: 1954 },
    { id: 2, titulo: "Dom Quixote", autor: "Miguel de Cervantes", anoPublicacao: 1605 },
    { id: 3, titulo: "1984", autor: "George Orwell", anoPublicacao: 1949 }
]
// Crie uma fun√ß√£o chamada encontrarLivroPorId que receba o id de um livro como par√¢metro e retorne o objeto do livro correspondente. Se nenhum livro for encontrado, a fun√ß√£o deve retornar null.
function encontrarLivroPorId(idLivro) {
    return biblioteca.find((livro) => {
        if (livro.id === idLivro) return livro;
        return null;
    });
}
// Utilize a fun√ß√£o para encontrar um livro com um id existente e imprima no console as informa√ß√µes do livro encontrado. Em seguida, utilize a fun√ß√£o para encontrar um livro com um id inexistente e imprima no console uma mensagem indicando que o livro n√£o foi encontrado.
// üìò Buscar livro com ID existente
const resultado1 = encontrarLivroPorId(2);
if (resultado1) {
  console.log(resultado1);
} else {
  console.log("‚ùå Livro com ID 2 n√£o encontrado.");
}
// üìï Buscar livro com ID inexistente
const resultado2 = encontrarLivroPorId(10);
if (resultado2) {
  console.log(resultado2);
} else {
  console.log("‚ùå Livro com ID 10 n√£o encontrado.");
}

// 2 -  Crie um array de objetos JavaScript representando informa√ß√µes de filmes. Cada objeto deve conter pelo menos as seguintes propriedades:
// id (number): identificador do filme.
// titulo (string): t√≠tulo do filme.
// diretor (string): nome do diretor.
// anoLancamento (number): ano de lan√ßamento do filme.
const catalogoFilmes = [
    { id: 1, titulo: "Matrix", diretor: "Lana Wachowski", anoLancamento: 1999 },
    { id: 2, titulo: "Jurassic Park", diretor: "Steven Spielberg", anoLancamento: 1993 },
    { id: 3, titulo: "Inception", diretor: "Christopher Nolan", anoLancamento: 2010 }
]
// Crie uma fun√ß√£o chamada filtrarFilmesPorAno que receba um ano como par√¢metro e retorne um novo array contendo apenas os filmes lan√ßados nesse ano.
function filtrarFilmesPorAno(ano) {
    return catalogoFilmes.filter((filme) => filme.anoLancamento === ano);
}
// Utilize a fun√ß√£o para filtrar os filmes lan√ßados em um ano espec√≠fico e imprima no console o array resultante. Em seguida, refa√ßa a opera√ß√£o com outro ano.
console.log('-------------------------');
console.log('Filtrando filme por ano:');
console.log(filtrarFilmesPorAno(1993));
console.log('Filtrando filme por ano:');
console.log(filtrarFilmesPorAno(2010));

// 3 - Crie um array de objetos JavaScript representando informa√ß√µes fict√≠cias de produtos. Cada objeto deve conter pelo menos as seguintes propriedades:
// id (number): identificador do produto.
// nome (string): nome do produto.
// preco (number): pre√ßo do produto.
const listaProdutos = [
    { id: 1, nome: "Camiseta", preco: 25.99 },
    { id: 2, nome: "Cal√ßa Jeans", preco: 49.99 },
    { id: 3, nome: "T√™nis", preco: 79.99 },
    { id: 4, nome: "Bon√©", preco: 15.99 }
]
// Crie uma fun√ß√£o chamada filtrarOrdenarProdutosPorPreco que recebe um valor m√°ximo (maxPreco) como par√¢metro e retorna um novo array contendo apenas os produtos cujo pre√ßo √© menor ou igual ao valor m√°ximo, ordenados em ordem crescente de pre√ßo.
function filtrarOrdenarProdutosPorPreco(maxPreco) {
    return listaProdutos
    .filter((produto) => produto.preco <= maxPreco)
    .sort((a, b) => a.preco - b.preco);
}
// Utilize a fun√ß√£o para filtrar e ordenar os produtos com um valor m√°ximo espec√≠fico e imprima no console o array resultante.
console.log('-------------------------');
console.log('Filtrando produtos por pre√ßo m√°ximo:');
console.log(filtrarOrdenarProdutosPorPreco(45));

// 4 - Crie um array de objetos JavaScript representando informa√ß√µes de animais. Cada objeto deve conter pelo menos as seguintes propriedades:
// id (number): identificador do animal.
// nome (string): nome do animal.
// especie (string): esp√©cie do animal.
// idade (number): idade do animal.
const animais = [
    { id: 1, nome: "Le√£o", especie: "Felino", idade: 5 },
    { id: 2, nome: "Elefante", especie: "Mam√≠fero", idade: 10 },
    { id: 3, nome: "Pinguim", especie: "Ave", idade: 3 }
]
// Crie uma fun√ß√£o chamada ordenarAnimais que receba como par√¢metro uma fun√ß√£o de compara√ß√£o para realizar a ordena√ß√£o do array.
function ordenarAnimais(comparacao) {
    return animais.sort(comparacao);
}

// 5 - Crie um array de objetos JavaScript representando informa√ß√µes fict√≠cias de departamentos. Cada objeto deve conter pelo menos as seguintes propriedades:
// id (number): identificador do departamento.
// nome (string): nome do departamento.
// funcionarios (array): array de objetos representando funcion√°rios do departamento.
const departamentos = [
    {
        id: 1,
        nome: "Vendas",
        funcionarios: [
            { id: 101, nome: "Ana", cargo: "Vendedor" },
            { id: 102, nome: "Carlos", cargo: "Gerente de vendas" }
        ]
    },
    {
        id: 2,
        nome: "TI",
        funcionarios: [
            { id: 201, nome: "Maria", cargo: "Desenvolvedor" },
            { id: 202, nome: "Jo√£o", cargo: "Analista de sistemas" }
        ]
    }
]
// Crie uma fun√ß√£o chamada encontrarFuncionarioPorId que recebe o id de um funcion√°rio e retorna o objeto do funcion√°rio correspondente em qualquer departamento.
function encontrarFuncionarioPorId(idFuncionario) {
  for (const departamento of departamentos) {
    const funcionario = departamento.funcionarios.find(f => f.id === idFuncionario);
    if (funcionario) {
      return funcionario;
    }
  }
  return 'Funcion√°rio n√£o encontrado.'; // Se n√£o encontrar
}
// Utilize a fun√ß√£o para encontrar um funcion√°rio com um id existente e imprima no console as informa√ß√µes do funcion√°rio encontrado. Em seguida, utilize a fun√ß√£o para encontrar um funcion√°rio com um id inexistente e imprima no console uma mensagem indicando que o funcion√°rio n√£o foi encontrado.
console.log('-------------------------');
console.log('Encontrando funcion√°rio por id:');
console.log(encontrarFuncionarioPorId(202)); // Jo√£o
console.log('-------------------------');
console.log('Encontrando funcion√°rio por id:');
console.log(encontrarFuncionarioPorId(999)); // n√£o existe